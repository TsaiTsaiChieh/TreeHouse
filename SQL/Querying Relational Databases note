----------------------------------------------------------------------------------------------------------------------
Where does the term “relational databases” come from? Tables in a relational database are linked -- or “related” -- 
via fields that they have in common.
What is Normalization? The process of designing a relational database.
Structuring data in a well thought out manner reduces disk space, eliminates redundant data, removes the possibility 
of updates anomalies, and boosts query performance. We learnt about normalization. This is the process of identifying 
and eliminating things in our database design, that would make our database perform poorly or have inconsistent data.

Unique Keys
1. Can be null
2. Multiple unique keys per Tables
(a unique email address column could also be in the same table as a unique Social Security number column.)
3. Can be modified to a new value
(as long as they don't conflict with any existing values in that column.)

Primary Keys
1. Never be null
2. One primary key per table
3. Cannot be modified to a new value
Primary Keys are implemented as auto incrementing number fields. Because they're primarily used for relating tables 
of data within the database itself, primary keys don't really have any useful values that have any meaning to 
business or application users. The use of number values as opposed to text data reduces disk storage space and speeds 
up query results.

Foreign Keys
Unique keys guaranteed data is unique within a given column. Primary keys also guaranteed the uniqueness within a 
column but they go a step further. They guarantee that each row in a table can be identified and those links from one 
table to another.
1. Columns designed correctly
(the sale and product relationship with the ProductID being referenced in this sales table. Database systems aren't 
smart enough to know that these two columns are related without an additional instruction when the tables are created.)
2. Foreign key Constraint
(constraint as a rule that the database has to enforce, once the database is instructed to enforce a foreign key 
constraint between two tables, it will not allow the value to be added to a table containing a foreign key unless the 
value also exists in a table with the primary key.)
Referential integrity(參照完整性): Foreign key value must also exist as a primary key value in the reference table.
Primary keys also work together with the foreign keys. To give us the ability to relate two tables of data together
on common data values. Without foreign key constraints, our data lacks referential integrity.

EyeColor Table
(primary key)
-----------------------------
|  EyeColorID  |  EyeColor  |
----------------------------|
|      1       |   Brown    |
|      2       |   Blue     |
-----------------------------
Person Table
                           (foreign key)
-----------------------------------------
|  PersonID  |    Name   |  EyeColorID  |
----------------------------------------|
|     1      |   Frank    |      1      |
|     2      |   Indira   |      2      |
|     3      |   Jessica  |      3      |
----------------------------------------
Without the constraint, the database doesn't care if we're trying to refer to a value that doesn't exist in the 
primary key of the EyeColor table. But if the database has proper constraints in place, it will not allow us to insert 
the row for Jessica with the eye color of three.
----------------------------------------------------------------------------------------------------------------------
https://reurl.cc/rOjjO
There are three types of relationships between tables: one to one, one to many, and many to many. These types are 
described by how many rows can be related to each other on either side of the relationship. One to many relationships 
are by far the most common type of relationship, this type of relationship means that one row in one table can be 
related to many rows in another table at the other side of the relationship, but not vice versa, the many can only 
happen in one direction.

Many to Many relationship means that one record can relate to many tables in another table, and one record from the 
second table can relate back to many records in the first table. When we have a many to many relationship type between 
two tables such as order and pop, it requires a third table.
When we have a many to many relationship type between two tables such as order and pop, it requires a third table.
Essentially what we've done here is resolved the many to many relationship by creating two one to many relationships.
This new table is sometimes called a junction table or an associative entity.

A one to one relationship between two tables means that one row from one table can only relate to one row on the other 
table at the other side of their relationship and vice versa. In practice, you don't see this type of relationship 
very often. A once one design might come in handy though separating the frequently and infrequently used columns can 
boost performance by reducing the overhead to access the most frequently used columns.

During the design process, the model speaks about tables as entities.
Database designers use a special notation to indicate the relationship between tables. One of the most common notation 
styles is called crow's foot notation.
One to One: {}-|-----|-{}
One to Many: {}-|-----<-{}
Many to Many: {}-|--<-{}->--|-{}
https://reurl.cc/znj9y
----------------------------------------------------------------------------------------------------------------------
JOIN is how a SQL query combines data from two tables into one result set.
What are all Chevy models?
    SELECT MakeName, ModelName FROM Make 
        INNER JOIN model ON Make.MakeID=Model.MakeID WHERE Make.MakeName="Chevy";
or 
    SELECT mk.MakeName, md.ModelName FROM Make AS mk
        inner JOIN model AS md ON mk.MakeID=md.MakeID WHERE mk.MakeName="Chevy";

SELECT <columns> 
    FROM <table1>
    INNER JOIN <table2> ON <equality criteria>
    [INNER JOIN <table3> ON <equality criteria>]
    WHERE <search criteria>

Three Types of Outer Joins: Left, Right, Full. The Left Outer Join returns all data from the table on the left. The 
right Outer Join is just like the left Outer Join. But the tables are flipped. The full outer join. This will match up 
all records that exist in both tables.
BMW doesn't show when we use the INNER JOIN. Let's change that to aid LEFT OUTER JOIN.
SELECT MakeName, ModelName FROM Make AS mk
  LEFT OUTER JOIN model AS md ON mk.MakeID=md.MakeID;
Now we see one row with a make of BMW in the results, with null in the value for the model. The order in which you 
specify the tables is important. The database engine will look for rows from the left table. Which is the one you 
specify first, immediately after the keyword from.
Finally, let's count our models, and alias it as number of models, to group by their common attribute.
    SELECT mk.MakeName, COUNT(md.ModelName) AS NumberOfModels FROM Make AS mk
        LEFT OUTER JOIN model AS md ON mk.MakeID=md.MakeID
        GROUP BY mk.MakeName;
B.M.W. has a zero count.
    SELECT <columns> 
        FROM <table1>
        LEFT OUTER JOIN <table2> ON <equality criteria>
        [LEFT OUTER JOIN <table3> ON <equality criteria>]
        WHERE <search criteria>

Q1: In a car database there is a Model table with columns, ModelID, MakeID and ModelName and a Car table with columns, 
CarID, ModelID, VIN, ModelYear and StickerPrice. For all cars in the database, show Model Name, VIN and Sticker Price 
in one result set.
    SELECT Model.ModelName, Car.VIN, Car.StickerPrice FROM Model INNER JOIN Car ON Model.ID = Car.ID;
Q2: In a car database there is a Make table with columns, MakeID and MakeName, a Model table with columns, ModelID, 
MakeID and ModelName and a Car table with columns, CarID, ModelID, VIN, ModelYear and StickerPrice. For all cars in 
the database, show Make Name, Model Name, VIN and Sticker Price from the Model and Car tables in one result set.
    SELECT mk.MakeName, md.ModelName, c.VIN, c.StickerPrice FROM Make as mk
		INNER JOIN Model AS md ON mk.MakeID = md.MakeID
        INNER JOIN Car AS c ON md.ModelID = c.ModelID;
Q3: In a car database there is a Sale table with columns, SaleID, CarID, CustomerID, LocationID, SalesRepID, 
SaleAmount and SaleDate. The database also has a SalesRep table with columns, SalesRepID, FirstName, LastName, SSN, 
PhoneNumber, StreetAddress, City, State and ZipCode. Show the First and Last Name of each sales rep along with 
SaleAmount from both the SalesRep and Sale tables in one result set.
    SELECT sr.FirstName, sr.LastName, s.SaleAmount FROM SalesRep AS sr
		INNER JOIN Sale AS s ON sr.SalesRepID = s.SalesRepID;
Q4: In a car database there is a Model table with columns, ModelID, MakeID and ModelName and a Car table with 
columns, CarID, ModelID, VIN, ModelYear and StickerPrice. Show all Model names from the Model table along with VIN 
from the Car table. Make sure models that aren’t in the Car table still show in the results!
    SELECT md.ModelName, c.VIN FROM Model AS md
		LEFT OUTER JOIN Car AS c ON md.ModelID = c.ModelID;
Q5: In a car database there is a Sale table with columns, SaleID, CarID, CustomerID, LocationID, SalesRepID, 
SaleAmount and SaleDate. The database also has a SalesRep table with columns, SalesRepID, FirstName, LastName, SSN, 
PhoneNumber, StreetAddress, City, State and ZipCode. Show all SaleDate, SaleAmount, and SalesRep First and Last name 
from Sale and SalesRep. Make sure that all Sales appear in results even if there is no SalesRep associated to the 
sale.
    SELECT s.SaleDate, s.SaleAmount, sr.FirstName, sr.LastName FROM Sale AS s
		LEFT OUTER JOIN SalesRep AS sr ON s.SalesRepID = sr.SalesRepID;
----------------------------------------------------------------------------------------------------------------------
Unions combine data from two tables all sets into one result set. The union operations stacks data vertically. Because 
the data is being stacked in this manner, the column definitions of both queries have to match. If they don't have the 
same number of columns, you'll get an error. 
In our car sales database we have a make table and a table containing only foreign makes. We can do that by adding the 
union keyword between two statements.
    SELECT * FROM Make UNION SELECT * FROM ForeignMake;
We see a few models more than once. Why is that? That's because the union statement returns a distinct set based on 
the column specified. In the case for the ID's for BMW and Honda the IDs are different in the make and foreign make 
table. So, it displays both instances when we include the ID field.
Might say we only care about car manufacturers that start with what is a B or C. Finally let's order that 
alphabetically.
    SELECT * FROM Make
        WHERE MakeName < "D"
    UNION
    SELECT * FROM ForeignMake
        WHERE MakeName < "D"
        ORDER BY MakeName;
Unions require the number of columns in your data set to be the same in your first and second queries.
    <query 1> UNION <query 2>
    Eliminates duplicates while combining multiple data sets into one result set.

Union All operations is very similar to union but there is one key difference: will return all of us from each select, 
even if there are duplicates.
    SELECT MakeName FROM Make
    UNION ALL
    SELECT MakeName FROM ForeignMake
        ORDER BY MakeName;
    <query 1> UNION All <query 2>

The intersect is only going to return the rows that exist in both. And for fun, let's see if we can order that in 
descending order. 
    SELECT MakeName FROM Make
    INTERSECT
    SELECT MakeName FROM ForeignMake
        ORDER BY MakeName DESC;
    <query 1> INTERSECT <query 2>
    Used to find and return values that exist in two different data sets.
What if we wanted to see the ID's along with the MakeNames. We get no records back, because with the ID's included, 
the rows no longer match. Since the ID values are different for each make from one to table to another.

Except operation will give you all records from a query except the rows that are a match in the second query. 
Except compares the result sets from two queries and returns just the rows from the first query except for the rows 
that are also in the second. (結果會是第一個表扣除在第二個表出現的資料) 
Use the except operations to do this:
    SELECT MakeName FROM Make EXCEPT SELECT MakeName FROM ForeignMake;
If we add the ID column to the first part of the query and not the second, We get an error. We can fix that by making 
the columns match up properly like so:
    SELECT MakeID, MakeName FROM Make EXCEPT SELECT ForeignMakeID, MakeName FROM ForeignMake;
Why do we get all of the rows from the ForeignMake even though we had the EXCEPT operation included? It's because 
even though the MakeNames match from one table to another, the IDs is different remember that sets operations in SQL
take into account the values from all columns provided in your query. So the database treats those rows as different 
and thus does not remove them when applying the except clause.
    <query 1> EXCEPT <query 2>
    Return only the results that are NOT in another table.

Q1: There are two tables Fruit and Vegetable table. The Fruit table has a FruitID and a Name column and the Vegetable 
table has a VegetableID and Name column. Create a distinct result set of fruit and vegetable names.
    SELECT Name FROM Fruit UNION SELECT Name FROM Vegetable;
Q2: There are two tables Fruit and Vegetable table. The Fruit table has a FruitID and a Name column and the Vegetable 
table has a VegetableID and Name column. Create a list of all fruits and vegetables starting with the letters A 
through K . In other words all fruit and vegetables that don't start with the letter L to Z.
    SELECT Name FROM Fruit WHERE NAME < "L"
	UNION 
    SELECT Name FROM Vegetable WHERE NAME < "L";
Q3: There are two tables Fruit and Vegetable table. The Fruit table has a FruitID and a Name column and the Vegetable 
table has a VegetableID and Name column. Create a list of fruits and vegetables that includes any potential duplicate 
values. Ensure that it is in alphabetical order so that the duplicates are next to each other!
    SELECT Name FROM Fruit UNION ALL SELECT Name FROM Vegetable ORDER BY Name;
Q4: There are two tables Fruit and Vegetable table. The Fruit table has a FruitID and a Name column and the Vegetable 
table has a VegetableID and Name column. Create an alphabetical list of produce that is considered both a fruit and a 
vegetable.
    SELECT Name FROM Fruit INTERSECT SELECT Name FROM Vegetable ORDER BY Name;
Q5: There are two tables Fruit and Vegetable table. The Fruit table has a FruitID and a Name column and the Vegetable 
table has a VegetableID and Name column. Create an alphabetical list of fruits that are NOT considered a vegetable.
    SELECT Name FROM Fruit EXCEPT SELECT Name FROM Vegetable ORDER BY Name;
Q6: There are two tables Fruit and Vegetable table. The Fruit table has a FruitID and a Name column and the Vegetable 
table has a VegetableID and Name column. Create an alphabetical list of vegetables that are NOT considered a fruit.
    SELECT Name FROM Vegetable EXCEPT SELECT Name FROM Fruit ORDER BY Name;
----------------------------------------------------------------------------------------------------------------------
A subquery is a query that is used in conjunction with another query. Usually for the purposes of defining or 
narrowing the results of the data returned by the main query. 
Subquery scnnarious
1. Criteria for a where clause is not specifically known.
2. Need a temporary dataset to join with other tables
Here is an example of subquery syntax. Notice the second or lower query is inside these parenthesis where our search 
criteria usually resides.
    SELECT <Columns>
    FROM <Table1>
    WHERE Columns1 IN (
        SELECT Columns1
        FROM <Table2>
        WHERE <Search Criteria>
    );

You can use the IN keyword in your WHERE statement to enumerate of a list of things to filter by:
    SELECT * FROM Sale WHERE CarID IN (1,3,5);
Now, let's say we don't know exactly which car IDs we need. This is where a subquery can help us out. If we wanted to 
see all sales of cars with the model year of 2015, we can replace this enumerated list of IDs with a query that gets 
us the car IDs that meets our criteria.
    SELECT CarID FROM Car WHERE ModelYear = 2015;
    -> SELECT * FROM Sale WHERE CarID IN (SELECT CarID FROM Car WHERE ModelYear = 2015); // replace IN (1,2,3);
The one trick to remember here is that you can only select one column in your subquery. If you have more than one 
you'll get an error.

Most of the time, when we create derived tables in a query it's because the data we need isn't stored in the exact 
format or structure that we want. Let's start with a simple example of a derived table. Let's delete the WHERE clause.
And Alias the sale table as S. Let's add an INNER JOIN. This is to join the Sales table with the resulting dataset 
from the subquery. In order to have join criteria, we have to give the dataset a name. So we have to create an alias t 
for temp. This alias here has created a temporary table or a derived table. You have to alias derived tables so you 
can refer to it in the join criteria. Otherwise, the database would not be able to parse the query.
    SELECT * FROM Sale AS s
    INNER JOIN (SELECT CarID FROM Car WHERE ModelYear = 2015) AS t
    ON s.CarID = t.CarID;
Notice, that we can now see the car ID column twice. The second instance of the CarID column is from the derived 
table. Using a subquery in the IN clause, didn't give you this ability. Since derived tables are, basically, temporary 
in memory tables. We can add any number of columns we want. Let's add model year to the temporary table.
    SELECT * FROM Sale AS s
    INNER JOIN (SELECT CarID, ModelYear FROM Car WHERE ModelYear = 2015) AS t
    ON s.CarID = t.CarID;

    SELECT <Columns>
    FROM <Table1>
    <INNER | OUTER> JOIN
    (SELECT <Columns> FROM <Table2> WHERE <Search Criteria>) AS <Alias> ON <Join Criteria>;
Unlike writing subqueries in an IN clause, you can add as many columns as you'd like. Then to use it as a table in 
your join criteria, you must alias the table.

I want to see the sum of sale amounts by sales rep and location. To do this, we will use the tables sale, sales rep, 
and location. Sale will provide the data that we want to sum, the sale amount, and we'll alias that as SaleAmount. 
Sales rep and location will provide the contextual data that we want to group by, the LastName and the LocationName.
We can get a good start like getting the decide data by using a standard GROUP BY.
    SELECT s.SalesRepID, sr.LastName, l.LocationName, SUM(s.SaleAmount) AS SaleAmount 
    FROM Sale AS s 
    INNER JOIN SalesRep AS sr ON s.SalesRepID = sr.SalesRepID 
    INNER JOIN Location AS l ON s.LocationID = l.LocationID 
    GROUP BY sr.LastName, l.LocationName;
We have two locations with sales data, Saint Louis and Columbia. Let's break out the data into separate queries and 
rejoin them as sub queries. we want to create a query that will return all sales from the sale table, for the Saint 
Louis location grouped by sales rep ID. First, we need to SalesRepID. Then, we want to sum the sale amount. And alias 
it as StLouisAmount. They St Louis location is the location ID of 1. Finally, let's GROUP BY the SalesRepID.
    SELECT s.SalesRepID, SUM(SaleAmount) AS StLouisAmount
    FROM Sale AS s WHERE s.LocationID = 1
    GROUP BY SalesRepID;
Let's do the same for the Columbia location. And the LocationID should be 2.
    SELECT s.SalesRepID, SUM(SaleAmount) AS StLouisAmount
    FROM Sale AS s WHERE s.LocationID = 1
    GROUP BY SalesRepID;
We can use these queries as subqueries. Can use LEFT OUTER JOIN so we don't lose any sales reps. Let's allies sub 
query say that we can refer to them elsewhere in the main query. Let's name the first sub query Loc1 for location one 
and Loc2 for location two.
    SELECT sr.LastName FROM SalesRep AS sr
        LEFT OUTER JOIN () AS Loc1
        LEFT OUTER JOIN () AS Loc2;
Let's cut and paste each of the queries in our subqueries and add the join criteria for both. This SalesRep table has 
a SalesRepID, so that's ideal to join them.
    SELECT sr.LastName, Loc1.StLouisAmount, Loc2.ColumbiaAmount FROM SalesRep AS sr
        LEFT OUTER JOIN (
            SELECT s.SalesRepID, SUM(SaleAmount) AS StLouisAmount
            FROM Sale AS s WHERE s.LocationID = 1
            GROUP BY SalesRepID
        ) AS Loc1 ON sr.SalesRepID = Loc1.SalesRepID
        LEFT OUTER JOIN (
            SELECT s.SalesRepID, SUM(SaleAmount) AS ColumbiaAmount
            FROM Sale AS s WHERE s.LocationID = 2
            GROUP BY SalesRepID
        ) AS Loc2 ON sr.SalesRepID = Loc2.SalesRepID;
You're not expected to have this all figure out in your head first before writing a single query like this.
The subquery is part of the FROM of the outer query and you can join to it just like any other table.

Q1: In a car database there is a Model table with columns, ModelID, MakeID and ModelName and a Car table with columns, 
CarID, ModelID, VIN, ModelYear and StickerPrice. Use a subquery along with IN to list all the Model Names with a 
Sticker Price greater than $30000
    SELECT m.ModelName FROM Model AS m WHERE ModelID IN (SELECT c.ModelID FROM Car AS c WHERE c.StickerPrice > 30000);
Q2: In a car database there is a Sale table with columns, SaleID, CarID, CustomerID, LocationID, SalesRepID, 
SaleAmount and SaleDate and a Car table with columns, CarID, ModelID, VIN, ModelYear and StickerPrice. Use a subquery 
along with IN to list all sales of cars with Sticker Price greater than $30000. Include all columns.
    SELECT * FROM Sale AS s WHERE s.CarID IN(SELECT c.CarID FROM Car AS c WHERE c.StickerPrice > 30000);
Q3: In a car database there is a Sale table with columns, SaleID, CarID, CustomerID, LocationID, SalesRepID, 
SaleAmount and SaleDate and a Customer table with columns, CustomerID, FirstName, LastName, Gender and SSN. Use a 
subquery along with IN to list all sales to female customers. (Gender = 'F') Select all columns.
    SELECT * FROM Sale AS s WHERE CustomerID IN (SELECT CustomerID FROM Customer AS c WHERE c.Gender = 'F');
Q4: In a car database there is a Sale table with columns, SaleID, CarID, CustomerID, LocationID, SalesRepID, 
SaleAmount and SaleDate and a Customer table with columns, CustomerID, FirstName, LastName, Gender and SSN. Use a 
subquery as a derived table to show all sales to female ('F') customers. Select all columns from the Sale table only.
    SELECT * FROM Sale AS s
        INNER JOIN (SELECT CustomerID FROM Customer WHERE Gender = 'F') AS c
        ON s.CustomerID = c.CustomerID;
https://reurl.cc/qWlrq
----------------------------------------------------------------------------------------------------------------------